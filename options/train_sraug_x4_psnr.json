{
  "task": "aug_x4_rrdb_p"     //  root/task/images|models|options     aug_x4_model or baseline_x4_model
  , "model": "plain_aug"           // "plain" | "plain2" if two inputs
  , "gpu_ids": [1,2]             // [0,1,2,3] for 4 GPUs
  , "dist": true

  , "scale": 4       // broadcast to "datasets"
  , "n_channels": 3  // broadcast to "datasets", 1 for grayscale, 3 for color

  , "path": {
    "root": "superresolution"      // "denoising" | "superresolution"
    , "pretrained_netG": null // "/home/varun/sr/KAIR/superresolution/baseline_x4_rrdb/models/10000_G.pth" // "/home/varun/sr/KAIR/model_zoo/40000_G.pth" // path of pretrained model
    , "pretrained_netA": null      // path of pretrained model
    , "pretrained_netE": null      // path of pretrained model
  }

  , "datasets": {
    "train": {
      "name": "train_dataset"           // fixed
      , "dataset_type": "sr"       // "dncnn" | "dnpatch" | "fdncnn" | "ffdnet" | "sr" | "srmd" | "dpsr" | "plain" | "plainpatch"
      , "dataroot_H": "/home/varun/sr/datasets/DIV2K/DIV2K_train_HR"  //"~/sr/datasets/DIV2K/DIV2K_train_HR"  // path of H training dataset trainsets/trainH
      , "dataroot_L": null              // path of L training dataset

      , "H_size": 192                   // patch_size 256 | 288 | 320  240
      , "shuffle_prob": 0.1
      , "use_sharp": false

      , "dataloader_shuffle": true
      , "dataloader_num_workers": 8     // 8 | 32 | 64
      , "dataloader_batch_size": 8      // batch size for all GPUs, 1 | 16 | 32 | 48 | 64 | 128
    }
    , "test": {
      "name": "test_dataset"            // fixed
      , "dataset_type": "sr"

      , "H_size": 240                   // patch_size 256 | 288 | 320
      , "shuffle_prob": 0.1             //
      , "use_sharp": false

      , "dataroot_H": "/home/varun/sr/datasets/DIV2K/DIV2K_valid_HR_randSample" //"~/sr/datasets/DIV2K/DIV2K_valid_HR"  testsets/set5  // path of H testing dataset
      , "dataroot_L": null              // path of L testing dataset
    }
  }

  , "netG": {
    "net_type": "rrdbnet"  // "dncnn" | "fdncnn" | "ffdnet" | "srmd" | "dpsr" | "srresnet0" |  "srresnet1" | "rrdbnet"
    , "in_nc": 3        // input channel number
    , "out_nc": 3       // ouput channel number
    , "nf": 64          // 96 for DPSR, 128 for SRMD, 64 for "dncnn"
    , "nb": 23          // 12 for "srmd", 15 for "ffdnet", 20 for "dncnn", 16 for "srresnet" and "dpsr"
    , "gc": 32          //
    , "ng": 2           // unused
    , "reduction" : 16  // unused
    , "act_mode": "L"   // "BR" for BN+ReLU | "R" for ReLU
    , "bias": true

    , "init_type": "orthogonal"         // "orthogonal" | "normal" | "uniform" | "xavier_normal" | "xavier_uniform" | "kaiming_normal" | "kaiming_uniform"
    , "init_bn_type": "uniform"         // "uniform" | "constant"
    , "init_gain": 0.2
  }
  , "netA": {
    "net_type": "rrdbnet"  // "rrdbnet" | "simple"
    , "in_nc": 3        // input channel number
    , "out_nc": 3       // ouput channel number
    , "nf": 64          // 96 for DPSR, 128 for SRMD, 64 for "dncnn"
    , "gc": 32          //
    , "nb1": 1          // number of residual blocks before the first max pooling layer
    , "nb2": 1          // number of residual blocks before the second max pooling layer
    , "nb3": 10         // 10 | 1 | 3 number of residual blocks after the second max pooling layer
    , "ng": 2           // unused
    , "reduction" : 16  // unused
    , "act_mode": "L"   // unused for now "BR" for BN+ReLU | "R" for ReLU
    , "bias": true

    , "init_type": "orthogonal"         // "orthogonal" | "normal" | "uniform" | "xavier_normal" | "xavier_uniform" | "kaiming_normal" | "kaiming_uniform"
    , "init_bn_type": "uniform"         // "uniform" | "constant"
    , "init_gain": 0.2
  }

  , "netD": {                        // Used for the discriminator used by the augmentor
    "net_type": "discriminator_vgg_48" // "discriminator_patchgan" | "discriminator_unet"
    , "in_nc": 3
    , "base_nc": 64
    , "n_layers": 3                  // only for "net_type":"discriminator_patchgan"
    , "norm_type": "spectral"        // only for "net_type":"discriminator_patchgan"  | 'batch', 'instance', 'spectral', 'batchspectral', 'instancespectral'
    , "act_mode": "BL"

    , "init_type": "orthogonal"      // "orthogonal" | "normal" | "uniform" | "xavier_normal" | "xavier_uniform" | "kaiming_normal" | "kaiming_uniform"
    , "init_bn_type": "uniform"      // "uniform" | "constant"
    , "init_gain": 0.2
  }

  , "train": {
      "G_lossfn_type": "l1"             // "l1" preferred | "l2sum" | "l2" | "ssim"
    , "G_lossfn_weight": 1.0            // default

    , "E_decay": 0.999                  // Exponential Moving Average for netG: set 0 to disable; default setting 0.999
    , "gan_type": "lsgan"

    , "G_optimizer_type": "adam"        // fixed, adam is enough
    , "G_optimizer_lr": 1e-4            // learning rate
    , "A_optimizer_type": "adam"        // fixed, adam is enough
    , "A_optimizer_lr": 1e-4            // learning rate
    , "G_optimizer_clipgrad": null      // unused
    , "G_optimizer_reuse": true
    , "A_optimizer_reuse": true

    , "G_scheduler_type": "MultiStepLR" // "MultiStepLR" is enough
    , "G_scheduler_milestones": [200000, 400000, 600000, 800000, 1000000, 2000000]
    , "G_scheduler_gamma": 0.5

    , "A_scheduler_type": "MultiStepLR" // "MultiStepLR" is enough
    , "A_scheduler_milestones": [200000, 400000, 600000, 800000, 1000000, 2000000]
    , "A_scheduler_gamma": 0.5

    , "G_regularizer_orthstep": null    // unused
    , "G_regularizer_clipstep": null    //

    , "G_param_strict": true
    , "E_param_strict": true

    // here are the options for the augmentor's discriminator
    , "AD_optimizer_lr": 5e-5
    , "AD_scheduler_milestones": [800000, 1600000]
    , "AD_scheduler_gamma": 0.5
    , "AD_optimizer_reuse": true
    , "AD_param_strict": true
    , "AD_lossfn_weight": 0.5


    , "checkpoint_test": 500000000000           // skip testing  they used 5000
    , "checkpoint_save": 2000           // for saving model 1000 is 5 epochs if batch size is 4
    , "checkpoint_print": 20000000000           // for print they used 200
    , "hard_ratio_start": 0.5             // The starting value of the hard ratio UNUSED
    , "hard_ratio_end": 20              // The final value of the hard ratio
    , "manual_seed": 1
  }
}
